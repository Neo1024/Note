OAuth2.0笔记：

授权模式：
1.客户端模式(Client Credentials)
2.密码模式(User Credentials)
3.简化模式(Implicit)
4.授权码模式(Authorization Code)


1. 客户端模式(Client Credentials)
客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。

这是最简单的一种方式, 不需要得到用户授权,只要资源服务方对第三方应用发放一个client_id和client_secret, 第三方应用访问资源时通过刚才的id和secret进行验证后即返回access_token。然后第三方应用可以向资源服务器请求获取资源（与用户无关的）。

步骤：
    （A）客户端向认证服务器进行身份认证，并要求一个访问令牌。

    （B）认证服务器确认无误后，向客户端提供访问令牌。

2. 密码模式(User Credentials)
密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。

在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。

步骤：
    （A）用户向客户端提供用户名和密码。

    （B）客户端将用户名和密码发给认证服务器，向后者请求令牌。

    （C）认证服务器确认无误后，向客户端提供访问令牌。


3. 简化模式(Implicit)
简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。

步骤：


    （A）客户端将用户导向认证服务器。

    （B）用户决定是否给于客户端授权。

    （C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。

	（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。

    	（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。

    	（F）浏览器执行上一步获得的脚本，提取出令牌。

    	（G）浏览器将令牌发给客户端。
  	<以上D，E，F，G四步可归纳为客户端从认证服务器的重定向的URI中获取到access_token>

A步骤中，客户端发出的HTTP请求，包含以下参数：
    response_type：表示授权类型，此处的值固定为"token"，必选项。
    client_id：表示客户端的ID，必选项。
    redirect_uri：表示重定向的URI，可选项。
    scope：表示权限范围，可选项。
    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。

C步骤中，认证服务器回应客户端的URI，包含以下参数：
    access_token：表示访问令牌，必选项。
    token_type：表示令牌类型，该值大小写不敏感，必选项。
    expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
    scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。
    state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。

4. 授权码模式(Authorization Code)
授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动。

步骤：
    （A）用户访问客户端，后者将前者导向认证服务器。

    （B）用户选择是否给予客户端授权。

    （C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码（此处的重定向URI应该将用户导向客户端应用的后台服务器）。

    （D）客户端应用的后台服务器收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。

    （E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。

A步骤中，客户端申请认证的URI，包含以下参数：
    response_type：表示授权类型，必选项，此处的值固定为"code"
    client_id：表示客户端的ID，必选项
    redirect_uri：表示重定向URI，可选项
    scope：表示申请的权限范围，可选项
    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。

C步骤中，服务器回应客户端的URI，包含以下参数：
    code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。
    state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。

D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：
    grant_type：表示使用的授权模式，必选项，此处的值固定为"authorization_code"。
    code：表示上一步获得的授权码，必选项。
    redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。
    client_id：表示客户端ID，必选项。

E步骤中，认证服务器发送的HTTP回复，包含以下参数：
    access_token：表示访问令牌，必选项。
    token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。
    expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
    refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。
    scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。


/******************************************************************************/
词汇：
authenticate
[英][ɔ:ˈθentɪkeɪt][美][ɔˈθɛntɪˌket]
vt.证明是真实的、可靠的或有效的; 鉴定，使生效; 

authentication
[英][ɔ:ˌθentɪ'keɪʃn][美][ɔ:ˌθentɪ'keɪʃn]
n.认证; 身份验证; 证明，鉴定; 密押; 

authorize
[英][ˈɔ:θəraɪz][美][ˈɔθəˌraɪz]
vt.授权，批准，委托; 

authorization
[英][ˌɔ:θəraɪˈzeɪʃn][美][ˌɔ:θərəˈzeɪʃn]
n.授权，批准; 批准（或授权）的证书; 

credential
[英][krəˈdenʃl][美][krɪˈdɛnʃəl]
n.文凭; 外交使节所递的国书，信任状; 
v.提供证明书;

grant
[英][grɑ:nt][美][grænt]
vt.承认; 同意; 准许; 授予; 
n.拨款; 补助金; 授给物（如财产、授地、专有权、补助、拨款等）; 
vi.同意; 

expire
[英][ɪkˈspaɪə(r)][美][ɪkˈspaɪr]
vi.期满; 文件、协议等（因到期而）失效; 断气; 逝世; 
/******************************************************************************/
